version: "3.9"

services:
  nginx:
    container_name: nginx
    image: nginx:1.27.0-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend

  backend:
    container_name: backend
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app
    depends_on:
      - postgres
      - redis
      - agent
    env_file:
      - ./backend/app/.env
    environment:
      - ENV=dev
    networks:
      - app-network

  agent:
    container_name: agent
    build: ./agent
    ports:
      - "8100:8100"
    volumes:
      - ./agent/app:/app
    depends_on:
      - postgres
    env_file:
      - ./agent/.env
    environment:
      - ENV=dev
    networks:
      - app-network

  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=monta-gpt
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    container_name: redis
    image: redis:7.4.0-alpine3.20
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/var/lib/redis/data
    networks:
      - app-network

volumes:
  postgres-data:
  redis-data:

networks:
  app-network:
